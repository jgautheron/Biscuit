/* composed file */

YUI.add('top-nav-plugin', function(Y) {
    TopNavigation.NAME = 'top-nav-plugin';
    TopNavigation.NS   = 'topNav';

    TopNavigation.ATTRS = {
        srcNode : {
            value : null,
            writeOnce : true
        }
    };

    const TAB_TEMPLATE         = '<li><h3>Click here to start</h3><h4>&nbsp;</h4><span class="close"></span></li>',
          SERVER_NAME_TEMPLATE = '{name} ({id})',
          MIDDLE_MOUSE = 2;

    function TopNavigation(config) {
        TopNavigation.superclass.constructor.apply(this, arguments);
    }

    Y.extend(TopNavigation, Y.Plugin.Base, {

        activeTab : null,

        currentServer : null,

        currentPage : null,

        initializer : function(cfg) {
            this.srcNode = Y.one(cfg.srcNode);
            this.app    = this.get('host');

            this._bindEvents();
            this._syncState();

            Y.log('initialized', null, 'TopNavigation');
        },

        destructor : function() {
            Y.detach('topNavigation|*');
            Y.detach('topNavigationOverlay|*');
        },

        getActiveTab : function() {
            return this.activeTab;
        },

        getCurrentServer : function() {
            return this.currentServer;
        },

        getCurrentPage : function() {
            return this.currentPage;
        },

        setServer : function(id, name) {
            // updates text & metadata
            var tabTitle = this.activeTab.one('h3');
            tabTitle.set('text', Y.substitute(SERVER_NAME_TEMPLATE, {id: id, name: name}));
            this.activeTab.setAttribute('data-server', id);
        },

        setPage : function(id, name) {
            // updates text & metadata
            var tabPage = this.activeTab.one('h4');
            tabPage.set('text', id);
            this.activeTab.setAttribute('data-page', id);
        },

        openTab : function(el) {
            var serverId = el.getAttribute('data-server'),
                pageId   = el.getAttribute('data-page');

            this.listOverlay.hide();
            if (serverId === '') {
                this.listOverlay.show(el, 'server');
            }

            this.srcNode.all('li').removeClass(this.CLASSNAMES.TAB_ACTIVE);
            el.addClass(this.CLASSNAMES.TAB_ACTIVE);

            this.activeTab = el;
            this.currentServer = serverId;
            this.currentPage = pageId;
        },

        newTab : function(active) {
            active = active || false;
            var tab = Y.Node.create(TAB_TEMPLATE);
            this.srcNode.one('ul').append(tab);

            if (active) {
                this.openTab(tab);
            }
        },

        closeTab : function(tab) {
            // hide list overlay if visible
            this.listOverlay.hide();
            var list = tab.ancestor('ul').get('children');

            // minimum 1 tab
            if (list.size() > 1) {
                tab.remove();
                Y.log('closed tab', null, 'TopNavigation');
            }

        },

        _syncState : function() {
            // creates one default tab
            this.newTab();

            // sets this default tab as active
            var tab = this.srcNode.one('li');
            tab.addClass(this.CLASSNAMES.TAB_ACTIVE);
            this.activeTab = tab;
        },

        _bindEvents : function() {
            this.srcNode.delegate('topNavigation|click', Y.bind(this._onTabClick, this), 'li:not(.' + this.CLASSNAMES.TAB_ACTIVE + ')');
            this.srcNode.delegate('topNavigation|click', Y.bind(this._onCloseClick, this), 'li .close');
            this.srcNode.delegate('topNavigation|click', Y.bind(this._onServerClick, this), 'li.' + this.CLASSNAMES.TAB_ACTIVE + ' h3');
            this.srcNode.delegate('topNavigation|click', Y.bind(this._onPageClick, this), 'li.' + this.CLASSNAMES.TAB_ACTIVE + ' h4');
            this.srcNode.one('.new').on('topNavigation|click', Y.bind(this._onNewClick, this));
            this.srcNode.one('ul').on('topNavigation|dblclick', Y.bind(this._onNavDblClick, this));
            this.srcNode.one('ul').on('topNavigation|mouseup', Y.bind(this._onNavMiddleClick, this));
        },

        _onNavMiddleClick : function(e) {
            if (e.which !== MIDDLE_MOUSE) {
                return;
            }

            // disallow the possibility to close when the tab is active
            // the user has to properly click on the close cross
            var tab = e.target.ancestor('li:not(.' + this.CLASSNAMES.TAB_ACTIVE + ')');
            if (!tab) {
                return;
            }

            this.closeTab(tab);
        },

        _onNavDblClick : function(e) {
            var expectedNode = e.currentTarget,
                node = e.target;
            if (node !== expectedNode) {
                return;
            }
            this.newTab(true);
        },

        _onNewClick : function(e) {
            e.stopImmediatePropagation();
            this.newTab(true);
        },

        _onTabClick : function(e) {
            var el = e.currentTarget;

            // stops propagation to not trigger server/page events
            e.stopImmediatePropagation();

            this.openTab(el);
        },

        _onCloseClick : function(e) {
            var el = e.currentTarget.ancestor('li');
            this.closeTab(el);
        },

        _onServerClick : function(e) {
            var tabNode = e.currentTarget.ancestor('li');

            // if page list, then instead of toggle show server list
            if (this.listOverlay.current.type === 'page') {
                this.listOverlay.show(tabNode, 'server');
                return;
            }

            this.listOverlay.toggle(tabNode, 'server');
        },

        _onPageClick : function(e) {
            if (e.currentTarget.get('text').trim() === '') {
                return;
            }
            var tabNode = e.currentTarget.ancestor('li');

            // if server list, then instead of toggle show page list
            if (this.listOverlay.current.type === 'server') {
                this.listOverlay.show(tabNode, 'page');
                return;
            }

            this.listOverlay.toggle(tabNode, 'page');
        },

        CLASSNAMES : {
            TAB_ACTIVE : 'active',
        }

    });

    Y.TopNavigation = Y.Base.mix(TopNavigation, [Y.TopNavigationListOverlay]);
}, '3.2.0', {requires:['plugin', 'node', 'overlay', 'top-nav-overlay', 'substitute']});


YUI.add('top-nav-overlay', function(Y) {
    const SELECTION_CLASSNAME = 'selection',
          BREADCRUMB_ACTIVE_CLASSNAME = 'active',
          RECENT_SERVER_CLASSNAME = 'server',
          RECENT_PAGE_CLASSNAME = 'page',
          LIST_TEMPLATE = '<li data-id="{id}" data-text="{textlc}">{text}</li>',
          RECENT_TEMPLATE = '<span data-id="" data-text="{textlc}">{text}</span>',
          SERVER_LIST = 'server',
          PAGE_LIST   = 'page',
          KEY_ENTER = 13;

    function TopNavigationListOverlay() {
        this._initListOverlay();
    }

    TopNavigationListOverlay.prototype = {
        _initListOverlay : function() {
            this.listOverlay.parent = this;
            this.listOverlay._init();
        },

        listOverlay : {
            instance : null,

            nodes : {},

            current : {
                'nodes' : {},
                'type'  : null,
                'count' : 0,
                'searchresults' : {}
            },

            _init : function() {
                this.app = this.parent.get('host');
                this._render();
            },

            isVisible : function() {
                return this.instance.getAttrs()['visible'] === true;
            },

            toggle : function(tabNode, type) {
                if (!this.isVisible()) {
                    this.show(tabNode, type);
                } else {
                    this.hide();
                }
            },

            show : function(tabNode, type) {
                switch (type) {
                    case SERVER_LIST:
                        this.showServerList();
                        break;
                    case PAGE_LIST:
                        this.showPageList();
                        break;
                }

                tabNode.addClass(SELECTION_CLASSNAME);

                var WidgetPositionAlign = Y.WidgetPositionAlign;
                console.log(this.instance);
                this.instance.set('align', {node: tabNode, points:[WidgetPositionAlign.TL, WidgetPositionAlign.BL]});
                this.instance.show();
                Y.log('list opened', null, 'TopNavigationListOverlay');
            },

            hide : function() {
                if (!this.isVisible()) {
                    return;
                }
                this.instance.hide();
                var node = this.parent.srcNode.one('li.' + SELECTION_CLASSNAME);
                if (node) {
                    node.removeClass(SELECTION_CLASSNAME);
                }
                Y.log('list closed', null, 'TopNavigationListOverlay');
            },

            _render : function() {
                this.instance = new Y.Overlay({
                    srcNode: '#server-overlay',
                    visible: false,
                    shim: false
                });
                this.instance.render();
                Y.log('rendered server list overlay', null, 'TopNavigationListOverlay');

                // defines the default state of the overlay
                this._syncState();

                // bind overlay events
                this._bindEvents();
            },

            _bindEvents : function() {
                var nodes = this.nodes;

                // close icon
                this.instance.headerNode.one('.close').on('topNavigationOverlay|click', Y.bind(this.hide, this));

                // server breadcrumb
                nodes.serverBc.on('topNavigationOverlay|click', this.showServerList, this);

                // server search
                nodes.searchField.on('topNavigationOverlay|keyup', Y.bind(this._onSearchInput, this));

                // populate list
                this.app.on('datastore:ready', Y.bind(this._populateServerList, this));

                // server list item click
                nodes.serverListContainer.delegate('topNavigationOverlay|click', Y.bind(this._onServerItemClick, this), 'li');

                // page list item click
                nodes.pageListContainer.delegate('topNavigationOverlay|click', Y.bind(this._onPageItemClick, this), 'li');

                // page list from server event
                this.app.gateway.listen(Biscuit.Locator.rest.services.page.list, Y.bind(this._populatePageList, this));

                // overlay click outside
                Y.one('#server-overlay').on('clickoutside',  Y.bind(this._clickOutside, this));
            },

            _syncState : function() {
                // cache often called nodes
                this.nodes = {
                    serverListContainer : this.instance.bodyNode.one('.server-list'),
                    pageListContainer   : this.instance.bodyNode.one('.page-list'),
                    headerBc            : this.instance.headerNode.one('h6'),
                    serverBc            : this.instance.headerNode.one('h6 .server'),
                    pageBc              : this.instance.headerNode.one('h6 .page'),
                    searchField         : this.instance.footerNode.one('.search input'),
                    recentContainer     : this.instance.footerNode.one('.recent'),
                    recentContent       : this.instance.footerNode.one('.recent .content')
                };

                // hide page list for now
                this.nodes.pageListContainer.hide();

                // hide breadcrumb
                this.nodes.pageBc.hide();
            },

            _clickOutside : function(e) {
                if (!this.isVisible()) {
                    return;
                }

                var tab = e.target.ancestor('li.active');
                if (tab) {
                    return;
                }

                this.hide();
            },

            _onSearchInput : function(e) {
                var input = e.currentTarget,
                    value = input._node.value.toLowerCase().trim();

                switch (e.keyCode) {
                    case KEY_ENTER:
                        if (this.current['count'] !== 1) {
                            return;
                        }

                        switch (this.current['type']) {
                            case 'server':
                                var node = this.current['searchresults'].item(0),
                                    id   = node.getAttribute('data-id'),
                                    name = node.getAttribute('data-text');

                                this._setServer(id, name);
                                Y.log('enter key event detected & processed', null, 'TopNavigationListOverlay');
                                break;
                            case 'page':

                                break;
                        }
                        return;
                }

                // display all nodes by default
                this.current['nodes'].setStyle('display', 'block');

                if (value === '') {
                    Y.log('empty search query', null, 'TopNavigationListOverlay');
                    return false;
                }
                if (!'_nodes' in this.current['nodes'] || this.current['nodes']._nodes.length <= 0) {
                    Y.log('could not find any list node', 'warn', 'TopNavigationListOverlay');
                    return false;
                }
                if (value.length >= 3) {
                    Y.log('filtering list for query: ' + value, null, 'TopNavigationListOverlay');
                    var nodeList = this.instance.bodyNode.all('.' + this.current['type'] + '-list > li:not([data-text*="' + value + '"])');
                    nodeList.setStyle('display', 'none');
                    this.current['count'] = this.current['nodes']._nodes.length - nodeList._nodes.length;
                    this.current['searchresults'] = this.instance.bodyNode.all('.' + this.current['type'] + '-list > li[data-text*="' + value + '"]');
                    if (this.current['count'] === 0) {
                        Y.log('could not find any server for query: ' + value, null, 'TopNavigationListOverlay');
                    }
                }
            },

            _populateServerList : function() {
                var html = [], i, node, servers = this.app.dataStore.data.server.list,
                    serverList = this.nodes.serverListContainer;

                for (i = 0; node = servers[i++];) {
                    html.push(
                        Y.Node.create(Y.substitute(LIST_TEMPLATE, {id: node['Server__'], text: node['Name'], textlc: node['Name'].toLowerCase()}))
                    );
                }
                serverList.get('children').remove();
                serverList.append(html);

                // default state
                this.current['nodes'] = this.nodes.serverList = Y.all(html);
                this.current['type']  = 'server';
                Y.log('populated server list', null, 'TopNavigationListOverlay');
            },

            _populatePageList : function(e, event, data, error) {
                switch (error) {
                    case 'NO_DATA':
                        alert('no pages for this server tooltip');
                        return;
                }
                var html = [], i, node, pages = data,
                    pageList = this.nodes.pageListContainer;

                for (i = 0; node = pages[i++];) {
                    html.push(
                        Y.Node.create(Y.substitute(LIST_TEMPLATE, {id: node['Page__'], text: node['Page__'], textlc: node['Page__'].toLowerCase()}))
                    );
                }
                pageList.get('children').remove();
                pageList.append(html);
                this.nodes.pageList = Y.all(html);
                Y.log('populated page list', null, 'TopNavigationListOverlay');

                this.showPageList();
            },

            _updateRecent : function(type) {
                var data = [];
                switch (type) {
                    case SERVER_LIST:
                        data = this.getRecentServers();
                        break;
                    case PAGE_LIST:
                        data = this.getRecentPages();
                        break;
                }

                var container = this.nodes.recentContainer;

                if (data.length > 0) { // if any
                    var content = this.nodes.recentContent, html = [];
                    container.show();
                    data.forEach(function(val) {
                        html.push(
                            Y.Node.create(Y.substitute(RECENT_TEMPLATE, {id: val['id'], text: val['name'], textlc: val['name']}))
                        );
                    });
                    content.get('children').remove();
                    content.append(html);
                } else { // if none
                    container.hide();
                }
            },

            _onServerItemClick : function(e) {
                var el = e.currentTarget,
                    serverId = el.getAttribute('data-id'),
                    serverName = el.getAttribute('data-text');
                this._setServer(serverId, serverName);
            },

            _onPageItemClick : function(e) {
                var el = e.currentTarget,
                    pageId = el.getAttribute('data-id'),
                    pageName = el.getAttribute('data-text');
                this._setPage(pageId, pageName);
            },

            _inStore : function(store, name) {
                if (store.length === 0) {
                    return;
                }
                store.forEach(function(o) {
                    if (o['id'] === name) {
                        return true;
                    }
                });
                return false;
            },

            _storeServer : function(id, name) {
                var localStore = this.app.localStore,
                    servers = localStore.get(localStore.definitions.RECENT_SERVERS);

                if (this._inStore(servers, id)) {
                    return;
                }

                // config: maximum 5
                if (servers.length === 5) {
                    servers.pop();
                }
                servers.unshift({id : id, name : name});
                localStore.set(localStore.definitions.RECENT_SERVERS, servers);
            },

            _storePage : function(id, name) {
                var localStore = this.app.localStore,
                    pages = localStore.get(localStore.definitions.RECENT_PAGES);

                if (this._inStore(pages, id)) {
                    return;
                }

                // config: maximum 5
                if (pages.length === 5) {
                    pages.pop();
                }
                pages.unshift({id : id, name : name});
                localStore.set(localStore.definitions.RECENT_PAGES, pages);
            },

            _setServer : function(id, name) {
                Y.log('picked server: ' + name, null, 'TopNavigationListOverlay');

                // changes tab server id & text
                this.parent.setServer(id, name);

                // stores locally the server name
                this._storeServer(id, name);

                // ask server for page list
                this.app.gateway.emit(Biscuit.Locator.rest.services.page.list, { 'params' : { 'Server__' : id }});
            },

            _setPage : function(id, name) {
                Y.log('picked page: ' + id, null, 'TopNavigationListOverlay');

                // changes page
                this.parent.setPage(id, name);

                // stores locally the page name
                this._storePage(id, name);
            },

            _setCurrentList : function(type) {
                var nodes = this.nodes;

                switch (type) {
                    case SERVER_LIST:
                        nodes.recentContainer.replaceClass(RECENT_PAGE_CLASSNAME, RECENT_SERVER_CLASSNAME);
                        this._updateRecent(SERVER_LIST);
                        this.current['nodes'] = this.nodes.serverList;
                        break;
                    case PAGE_LIST:
                        nodes.recentContainer.replaceClass(RECENT_SERVER_CLASSNAME, RECENT_PAGE_CLASSNAME);
                        this._updateRecent(PAGE_LIST);
                        this.current['nodes'] = this.nodes.pageList;
                        break;
                }

                this.current['type']  = type;
                this.current['nodes'].setStyle('display', 'block');

                this.nodes.searchField._node.value = '';
            },

            getRecentServers : function() {
                var localStore = this.app.localStore;
                return localStore.get(localStore.definitions.RECENT_SERVERS);
            },

            getRecentPages : function() {
                var localStore = this.app.localStore;
                return localStore.get(localStore.definitions.RECENT_PAGES);
            },

            showServerList : function() {
                var nodes = this.nodes;
                this._setCurrentList(SERVER_LIST);

                // if already active, do nothing
                if (nodes.serverBc.hasClass(BREADCRUMB_ACTIVE_CLASSNAME)) {
                    return;
                }

                nodes.pageListContainer.hide();
                nodes.serverBc.addClass(BREADCRUMB_ACTIVE_CLASSNAME);
                nodes.pageBc.removeClass(BREADCRUMB_ACTIVE_CLASSNAME).hide();
                nodes.serverListContainer.show();

                Y.log('displayed server list', null, 'TopNavigationListOverlay');
            },

            showPageList : function() {
                var nodes = this.nodes;
                this._setCurrentList(PAGE_LIST);

                // if already active, do nothing
                if (nodes.pageBc.hasClass(BREADCRUMB_ACTIVE_CLASSNAME)) {
                    return;
                }

                nodes.serverListContainer.hide();
                nodes.serverBc.removeClass(BREADCRUMB_ACTIVE_CLASSNAME);
                nodes.pageListContainer.show();
                nodes.pageBc.addClass(BREADCRUMB_ACTIVE_CLASSNAME).show();

                Y.log('displayed page list', null, 'TopNavigationListOverlay');
            }

        }
    };

    Y.TopNavigationListOverlay = TopNavigationListOverlay;
}, '3.2.0', {requires:['event-custom', 'event-key', 'substitute', 'overlay']});

YUI.add('localstore-ext', function(Y) {
    function LocalStore() {
        this._initLocalStore();
    }

    LocalStore.prototype = {
        _initLocalStore : function() {
            this.localStore.parent = this;
            this.localStore._init();
        },

        localStore : {
            definitions : {
                RECENT_SERVERS : {
                    'key'   : 'recent_servers',
                    'value' : []
                },
                RECENT_PAGES : {
                    'key'   : 'recent_pages',
                    'value' : []
                },
            },

            _init : function() {
                this.app = this.parent.get('host');
                this._setup();
            },

            _setup : function() {
                for (var i in this.definitions) {
                    var definition = this.definitions[i];
                    if (!localStorage[definition['key']]) {
                        localStorage[definition['key']] = definition['value'];
                    }
                }
            },

            set : function(key, value) {
                key = key['key'];
                localStorage[key] = JSON.stringify(value);
            },

            get : function(key) {
                key = key['key'];
                try {
                    return JSON.parse(localStorage[key]);
                } catch (e) {
                    return key['value'];
                }
            }
        }
    };

    Y.LocalStore = LocalStore;
}, '3.2.0', {requires:[]});

YUI.add('datastore-ext', function(Y) {
    function DataStore() {
        this._initDataStore();
    }

    DataStore.prototype = {

        _initDataStore : function() {
            this.dataStore.parent = this;
            this.dataStore._init();
        },

        dataStore : {
            data : {},

            _init : function() {
                this.parent.publish('datastore:ready', { preventable: false, broadcast: 1 });

                this.parent.on('socket:connected', function(e) {
                    // preload server list
                    this.gateway.emit(Biscuit.Locator.rest.services.server.list);
                });

                this.parent.gateway.listen(Biscuit.Locator.rest.services.server.list, function(e, event, data) {
                    this.dataStore.data.server = { list : data };
                    Y.log('fetched server list', null, 'DataStore');
                    this.fire('datastore:ready');
                });
            }
        }
    };

    Y.DataStore = DataStore;
}, '3.2.0', {requires:['event-custom']});

YUI.add('gateway-ext', function(Y) {
    function Gateway() {
        this._initGateway();
    }

    const SERVER_EVENT_PREFIX = 'server:';

    Gateway.prototype = {

        _initGateway : function() {
            this.gateway.parent = this;
            this.gateway._init();
        },

        gateway : {
            connectInterval : null,

            socket : null,

            _init : function() {
                this.parent.publish('socket:connected', { preventable: false, broadcast: 1 });
                this.parent.publish('socket:disconnected', { preventable: false, broadcast: 1 });
                this._setupServerConnection();
            },

            getGateway : function() {
                return this.socket;
            },

            emit : function(event, data) {
                data = data || {};
                var request = {
                    'event' : event.name,
                    'data'  : data
                };
                this.socket.send(JSON.stringify(request));
            },

            listen : function(event, fn) {
                this.parent.on(SERVER_EVENT_PREFIX + event.name, fn);
            },

            _setupServerConnection : function() {
                this.socket = new io.Socket();
                this.socket.connect();
                this.socket.on('connect', Y.bind(function() {
                    this.fire('socket:connected');
                    Y.log('established connection with server', null, 'Gateway');
                }, this.parent));
                this.socket.on('message', Y.bind(function(data) {
                    data = JSON.parse(data);
                    var event = data['event'],
                        error = data['error'] || null,
                        data = data['data'];

                    Y.log('received event: ' + event, null, 'Gateway');

                    if (error !== null) {
                        Y.log('got error: ' + error, 'warn', 'Gateway');
                    }

                    // throws dynamically a custom event
                    this.publish('server:' + event, { preventable: false, broadcast: 1 });
                    this.fire(SERVER_EVENT_PREFIX + event, event, data, error);
                }, this.parent));
                this.socket.on('disconnect', Y.bind(function() {
                    this.fire('socket:disconnected');
                    Y.log('lost connection with server', 'warn', 'Gateway');
                    this.gateway._connectInterval();
                }, this.parent));
            },

            _connectInterval : function() {
                var _connect = function() {
                    if (this.socket.connected) {
                        clearInterval(this.connectInterval);
                        return;
                    }
                    Y.log('trying to reconnect with server', 'warn', 'Gateway');
                    this.socket.connect();
                };
                this.connectInterval = window.setInterval(Y.bind(_connect, this), 2000);
            }
        }
    };

    Y.Gateway = Gateway;
}, '3.2.0', {requires:['event-custom']});

YUI.add('biscuit', function(Y) {
    var Base = Y.Base.create('Base', Y.Base, [Y.Gateway, Y.DataStore, Y.LocalStore]);

    Biscuit.NAME = 'Biscuit';
    function Biscuit(config) {
        Biscuit.superclass.constructor.apply(this, arguments);
    }
    Y.extend(Biscuit, Base, {
        initializer : function(cfg) {
            // preloaded event
            this.publish('biscuit:preloaded', { preventable: false, broadcast: 1 });
            Y.log('initialized', null, 'Biscuit');

            Y.one('body').addClass('yui3-skin-sam');
        },

        destructor : function() { }
    });

    Y.Biscuit = Biscuit;
}, '3.2.0', {requires:['base', 'gateway-ext', 'datastore-ext', 'localstore-ext']});

YUI({
    gallery: 'gallery-2010.11.12-20-45'
}).use('console', 'dd-plugin', 'biscuit', 'top-nav-plugin', 'gallery-effects', 'gallery-outside-events', function(Y) {

    var basic = new Y.Console({
        width: '350px'
    })
    .plug(Y.Plugin.Drag, {handles: ['.yui3-console-hd']})
    .render('#yconsole');

    var app = new Y.Biscuit({
        plugins : [
            {fn: Y.TopNavigation, cfg: {srcNode:'.biscuit-tabs'}}
        ]
    });

});
