YUI.add('top-nav-plugin', function(Y) {
    TopNavigation.NAME = 'top-nav-plugin';
    TopNavigation.NS   = 'topNav';

    TopNavigation.ATTRS = {
        srcNode : {
            value : null,
            writeOnce : true
        }
    };

    const TAB_TEMPLATE         = '<li><h3>Click here to start</h3><h4>&nbsp;</h4><span class="close"></span></li>',
          SERVER_NAME_TEMPLATE = '{name} ({id})',
          MIDDLE_MOUSE = 2;

    function TopNavigation(config) {
        TopNavigation.superclass.constructor.apply(this, arguments);
    }

    Y.extend(TopNavigation, Y.Plugin.Base, {

        activeTab : null,

        currentServer : null,

        currentPage : null,

        initializer : function(cfg) {
            this.srcNode = Y.one(cfg.srcNode);
            this.app    = this.get('host');

            this._bindEvents();
            this._syncState();

            Y.log('initialized', null, 'TopNavigation');
        },

        destructor : function() {
            Y.detach('topNavigation|*');
            Y.detach('topNavigationOverlay|*');
        },

        getActiveTab : function() {
            return this.activeTab;
        },

        getCurrentServer : function() {
            return this.currentServer;
        },

        getCurrentPage : function() {
            return this.currentPage;
        },

        setServer : function(id, name) {
            // updates text & metadata
            var tabTitle = this.activeTab.one('h3');
            tabTitle.set('text', Y.substitute(SERVER_NAME_TEMPLATE, {id: id, name: name}));
            this.activeTab.setAttribute('data-server', id);
        },

        setPage : function(id, name) {
            // updates text & metadata
            var tabPage = this.activeTab.one('h4');
            tabPage.set('text', id);
            this.activeTab.setAttribute('data-page', id);
        },

        openTab : function(el) {
            var serverId = el.getAttribute('data-server'),
                pageId   = el.getAttribute('data-page');

            this.listOverlay.hide();
            if (serverId === '') {
                this.listOverlay.show(el, 'server');
            }

            this.srcNode.all('li').removeClass(this.CLASSNAMES.TAB_ACTIVE);
            el.addClass(this.CLASSNAMES.TAB_ACTIVE);

            this.activeTab = el;
            this.currentServer = serverId;
            this.currentPage = pageId;
        },

        newTab : function(active) {
            active = active || false;
            var tab = Y.Node.create(TAB_TEMPLATE);
            this.srcNode.one('ul').append(tab);

            if (active) {
                this.openTab(tab);
            }
        },

        closeTab : function(tab) {
            // hide list overlay if visible
            this.listOverlay.hide();
            var list = tab.ancestor('ul').get('children');

            // minimum 1 tab
            if (list.size() > 1) {
                tab.remove();
                Y.log('closed tab', null, 'TopNavigation');
            }

        },

        _syncState : function() {
            // creates one default tab
            this.newTab();

            // sets this default tab as active
            var tab = this.srcNode.one('li');
            tab.addClass(this.CLASSNAMES.TAB_ACTIVE);
            this.activeTab = tab;
        },

        _bindEvents : function() {
            this.srcNode.delegate('topNavigation|click', Y.bind(this._onTabClick, this), 'li:not(.' + this.CLASSNAMES.TAB_ACTIVE + ')');
            this.srcNode.delegate('topNavigation|click', Y.bind(this._onCloseClick, this), 'li .close');
            this.srcNode.delegate('topNavigation|click', Y.bind(this._onServerClick, this), 'li.' + this.CLASSNAMES.TAB_ACTIVE + ' h3');
            this.srcNode.delegate('topNavigation|click', Y.bind(this._onPageClick, this), 'li.' + this.CLASSNAMES.TAB_ACTIVE + ' h4');
            this.srcNode.one('.new').on('topNavigation|click', Y.bind(this._onNewClick, this));
            this.srcNode.one('ul').on('topNavigation|dblclick', Y.bind(this._onNavDblClick, this));
            this.srcNode.one('ul').on('topNavigation|mouseup', Y.bind(this._onNavMiddleClick, this));
        },

        _onNavMiddleClick : function(e) {
            if (e.which !== MIDDLE_MOUSE) {
                return;
            }

            // disallow the possibility to close when the tab is active
            // the user has to properly click on the close cross
            var tab = e.target.ancestor('li:not(.' + this.CLASSNAMES.TAB_ACTIVE + ')');
            if (!tab) {
                return;
            }

            this.closeTab(tab);
        },

        _onNavDblClick : function(e) {
            var expectedNode = e.currentTarget,
                node = e.target;
            if (node !== expectedNode) {
                return;
            }
            this.newTab(true);
        },

        _onNewClick : function(e) {
            e.stopImmediatePropagation();
            this.newTab(true);
        },

        _onTabClick : function(e) {
            var el = e.currentTarget;

            // stops propagation to not trigger server/page events
            e.stopImmediatePropagation();

            this.openTab(el);
        },

        _onCloseClick : function(e) {
            var el = e.currentTarget.ancestor('li');
            this.closeTab(el);
        },

        _onServerClick : function(e) {
            var tabNode = e.currentTarget.ancestor('li');

            // if page list, then instead of toggle show server list
            if (this.listOverlay.current.type === 'page') {
                this.listOverlay.show(tabNode, 'server');
                return;
            }

            this.listOverlay.toggle(tabNode, 'server');
        },

        _onPageClick : function(e) {
            if (e.currentTarget.get('text').trim() === '') {
                return;
            }
            var tabNode = e.currentTarget.ancestor('li');

            // if server list, then instead of toggle show page list
            if (this.listOverlay.current.type === 'server') {
                this.listOverlay.show(tabNode, 'page');
                return;
            }

            this.listOverlay.toggle(tabNode, 'page');
        },

        CLASSNAMES : {
            TAB_ACTIVE : 'active',
        }

    });

    Y.TopNavigation = Y.Base.mix(TopNavigation, [Y.TopNavigationListOverlay]);
}, '3.2.0', {requires:['plugin', 'node', 'overlay', 'top-nav-overlay', 'substitute']});
